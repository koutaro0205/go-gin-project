package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"go-gin-project/db"
	"go-gin-project/graph/generated"
	"go-gin-project/graph/model"
)

// Mutation
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.Todo, error) {
	todo := model.Todo{
		Title: input.Title,
		Done:  false,
	}
	db.DB.Create(&todo)

	return &todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.UpdateTodoInput) (*model.Todo, error) {
	todo := model.Todo{}
	if err := db.DB.First(&todo, "id = ?", input.ID).Error; err != nil {
		return nil, err
	}

	todo.Title = input.Title
	todo.Done = input.Done

	db.DB.Save(&todo)

	return &todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, input model.DeleteTodoInput) (*model.Todo, error) {
	todo := model.Todo{}
	if err := db.DB.First(&todo, "id = ?", input.ID).Error; err != nil {
		return nil, err
	}

	db.DB.Delete(&todo)

	return &todo, nil
}

// Query
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos := []*model.Todo{}
	db.DB.Find(&todos)

	return todos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, input *model.FetchTodoInput) (*model.Todo, error) {
	todo := model.Todo{}

	if err := db.DB.First(&todo, "id = ?", input.ID).Error; err != nil {
		return nil, err
	}

	return &todo, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
